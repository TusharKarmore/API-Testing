{
	"info": {
		"_postman_id": "abc81284-5024-40d2-a900-b20aea1149fe",
		"name": "StudentsAPIChainning",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27958832"
	},
	"item": [
		{
			"name": "Get single student data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ststus code is 200\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Successful get request\", ()=>{\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201])\r",
							"});\r",
							"pm.test(\"Content-type header is present\",()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", ()=>{\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');    \r",
							"});\r",
							"pm.test(\"Cookie 'Language' is present\",()=>{\r",
							"    pm.expect(pm.cookies.has('language')).to.be.false;\r",
							"});\r",
							"// pm.test(\"Cookies language has value 1\",()=>{\r",
							"//     pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
							"// });\r",
							"pm.test(\"Response time is less than 200ms\",() =>{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"const jsonData=pm.response.json();\r",
							"pm.test(\"Test data type of the response\",() =>{\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"\r",
							"});\r",
							"//validate whether array contains the proper data\r",
							"pm.test(\"Test array properties\", () =>{\r",
							"    pm.expect(jsonData.courses).to.include(\"Python\");\r",
							"     pm.expect(jsonData.courses).to.have.members([\"Python\",\"Appium\"]);\r",
							"});\r",
							"//Validating JSON fields in response\r",
							"var jsonData1=pm.response.json();\r",
							"pm.test(\"Validating all fields records\",()=>{\r",
							"    pm.expect(jsonData1.id).to.eql(\"2\");\r",
							"    pm.expect(jsonData1.name).to.eql(\"Kim\");\r",
							"    pm.expect(jsonData1.location).to.eql(\"US\");\r",
							"    pm.expect(jsonData1.phone).to.eql(\"98876543213\");\r",
							"    pm.expect(jsonData1.courses[0]).to.eql(\"Python\");\r",
							"    pm.expect(jsonData1.courses[1]).to.eql(\"Appium\");\r",
							"});\r",
							"// jason schema validation\r",
							"var schema={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Schema is valid\",() =>{\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all students data",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new student",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Scott\",\r\n\"location\": \"France\",\r\n\"phone\": \"123456\",\r\n\"courses\":[\"C\", \"C++\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update student",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Scott\",\r\n\"location\": \"Germany\",\r\n\"phone\": \"654321\",\r\n\"courses\":[\"C\", \"C++\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/yRYZ5o5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"yRYZ5o5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/yRYZ5o5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"yRYZ5o5"
					]
				}
			},
			"response": []
		}
	]
}